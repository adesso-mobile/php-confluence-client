<?php
/**
 * ConfluencePageExistsHistoryCreatedBy
 *
 * PHP version 5
 *
 * @category Class
 * @package  ConfluenceClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Confluence Rest Resources
 *
 * This is the confluence rest resources endpoint documentation
 *
 * The version of the OpenAPI document: 6.15.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.2
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ConfluenceClient\Model;

use \ArrayAccess;
use \ConfluenceClient\ObjectSerializer;

/**
 * ConfluencePageExistsHistoryCreatedBy Class Doc Comment
 *
 * @category Class
 * @package  ConfluenceClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ConfluencePageExistsHistoryCreatedBy implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'confluencePageExists_history_createdBy';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'type' => 'string',
        'username' => 'string',
        'user_key' => 'string',
        'profile_picture' => '\ConfluenceClient\Model\ConfluencePageExistsHistoryCreatedByProfilePicture',
        'display_name' => 'string',
        '_links' => '\ConfluenceClient\Model\ConfluencePageExistsHistoryCreatedByLinks',
        '_expandable' => '\ConfluenceClient\Model\ConfluencePageExistsHistoryCreatedByExpandable'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'type' => null,
        'username' => null,
        'user_key' => null,
        'profile_picture' => null,
        'display_name' => null,
        '_links' => null,
        '_expandable' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'username' => 'username',
        'user_key' => 'userKey',
        'profile_picture' => 'profilePicture',
        'display_name' => 'displayName',
        '_links' => '_links',
        '_expandable' => '_expandable'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'username' => 'setUsername',
        'user_key' => 'setUserKey',
        'profile_picture' => 'setProfilePicture',
        'display_name' => 'setDisplayName',
        '_links' => 'setLinks',
        '_expandable' => 'setExpandable'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'username' => 'getUsername',
        'user_key' => 'getUserKey',
        'profile_picture' => 'getProfilePicture',
        'display_name' => 'getDisplayName',
        '_links' => 'getLinks',
        '_expandable' => 'getExpandable'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['username'] = isset($data['username']) ? $data['username'] : null;
        $this->container['user_key'] = isset($data['user_key']) ? $data['user_key'] : null;
        $this->container['profile_picture'] = isset($data['profile_picture']) ? $data['profile_picture'] : null;
        $this->container['display_name'] = isset($data['display_name']) ? $data['display_name'] : null;
        $this->container['_links'] = isset($data['_links']) ? $data['_links'] : null;
        $this->container['_expandable'] = isset($data['_expandable']) ? $data['_expandable'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['username'] === null) {
            $invalidProperties[] = "'username' can't be null";
        }
        if ($this->container['user_key'] === null) {
            $invalidProperties[] = "'user_key' can't be null";
        }
        if ($this->container['profile_picture'] === null) {
            $invalidProperties[] = "'profile_picture' can't be null";
        }
        if ($this->container['display_name'] === null) {
            $invalidProperties[] = "'display_name' can't be null";
        }
        if ($this->container['_links'] === null) {
            $invalidProperties[] = "'_links' can't be null";
        }
        if ($this->container['_expandable'] === null) {
            $invalidProperties[] = "'_expandable' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string $username username
     *
     * @return $this
     */
    public function setUsername($username)
    {
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets user_key
     *
     * @return string
     */
    public function getUserKey()
    {
        return $this->container['user_key'];
    }

    /**
     * Sets user_key
     *
     * @param string $user_key user_key
     *
     * @return $this
     */
    public function setUserKey($user_key)
    {
        $this->container['user_key'] = $user_key;

        return $this;
    }

    /**
     * Gets profile_picture
     *
     * @return \ConfluenceClient\Model\ConfluencePageExistsHistoryCreatedByProfilePicture
     */
    public function getProfilePicture()
    {
        return $this->container['profile_picture'];
    }

    /**
     * Sets profile_picture
     *
     * @param \ConfluenceClient\Model\ConfluencePageExistsHistoryCreatedByProfilePicture $profile_picture profile_picture
     *
     * @return $this
     */
    public function setProfilePicture($profile_picture)
    {
        $this->container['profile_picture'] = $profile_picture;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string $display_name display_name
     *
     * @return $this
     */
    public function setDisplayName($display_name)
    {
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets _links
     *
     * @return \ConfluenceClient\Model\ConfluencePageExistsHistoryCreatedByLinks
     */
    public function getLinks()
    {
        return $this->container['_links'];
    }

    /**
     * Sets _links
     *
     * @param \ConfluenceClient\Model\ConfluencePageExistsHistoryCreatedByLinks $_links _links
     *
     * @return $this
     */
    public function setLinks($_links)
    {
        $this->container['_links'] = $_links;

        return $this;
    }

    /**
     * Gets _expandable
     *
     * @return \ConfluenceClient\Model\ConfluencePageExistsHistoryCreatedByExpandable
     */
    public function getExpandable()
    {
        return $this->container['_expandable'];
    }

    /**
     * Sets _expandable
     *
     * @param \ConfluenceClient\Model\ConfluencePageExistsHistoryCreatedByExpandable $_expandable _expandable
     *
     * @return $this
     */
    public function setExpandable($_expandable)
    {
        $this->container['_expandable'] = $_expandable;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


